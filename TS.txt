





				Angular    React   Vue

      -------------------------------------------------------------			

				   TS
	     ----------------------------------------------
                                 (ES 6)
			         (ES 5)
				JAVASCRIPT


TS = ES6 + TYPE SYSTEM

TS Compiler converts code written in ts(es6)  to ES 5 by default

es6 ---- es5
let ----> var

ts
 langugage fundmentals
  let,const
  variables
literals -how many literals
data types ?
operators
control structures
booleans
loops
..
functions
  args,parameters,return value
fp concepts
arrow fun

oop:
class
constru
object creational patterns
object types
arrays

generics

modules

decorators

Angular

 TS
 RXJS

TS;
 
/.

Task-1 : How to refactor the below code?

//how to refactor this code

class User {
    userId: string = "00A12"
    userName: string = "userName"
    status: boolean = false
    constructor(userId: string, userName: string, status: boolean) {
        this.userId = userId
        this.userName = userName
        this.status = status
    }
}

class UserService {
    findAll() {
        return "findAll"
    }
}

class UserComponent {
    //has-a relationship :Dependency injection
    userService: UserService
    constructor(userService: UserService) {
        this.userService = userService
    }
}

function main() {
    let user = new User("100A2", "Subramanian", true)
    let userService = new UserService()
    let userComponent = new UserComponent(userService);
    console.log(user,userComponent)
}
main()
...................................................................................

Angular :

TS
 -DI
 -Decorators
 -ES 6 Modules
.....................................................................................
			Javascript modularity



Modularity:
..........

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.


What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
....................................................................................


Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6
.....................................................................................
			ES 6 Module

How to share code from one file to another file?

code: 
 variable declarations - variables with any literal
 class
 interfaces

to share code we have two keywords
1.export
2.export default 

How to use shared code from another file?

1.import			


eg:

src/util/config.ts

//configuration

//code
export const appName: string = "Health Care System"
export const version: string = "1.0.0"
export const price: number = 1000
export const status: boolean = true
export const security = {
    userId: 11,
    key: 'A003331'
}
src/main.ts
//main file /entry file
import { appName, price, version, status, security } from './util/config'


function main() {
    console.log(`App Name ${appName}`)
    console.log(`App Version ${version}`)
    console.log(`App Status ${status}`)
    console.log(`App Price ${price}`)
    console.log(`Security ${security.userId} ${security.key}`)

}
main()

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Typescript Apps</h1>
    <script src="build/main.js"></script>
</body>
</html>

When you run this code in browser?

Uncaught SyntaxError: Cannot use import statement outside a module (at main.js:2:1)

The reason browser does not support "any module pattern directly".

Solution:

1.we need to use build tools
 webpack.

1.webpack

How to install webpack in our project?

Steps:

1.make sure that you have package.json file
 if not , create package.json file

npm init

2.install webpack
  npm install webpack webpack-cli --save-dev

3.add webpack.config.js in the project root dir

const path = require('path');

module.exports = {
  entry: './build/index.js',
  mode:'development',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
};

4.build /bundle your code
 open package.json
 add entry into scripts

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack"
  }

5.start bundling
  open cmd and run the following command
npm run build

> es6-apps@1.0.0 build
> webpack

asset bundle.js 5.19 KiB [emitted] (name: main)
runtime modules 670 bytes 3 modules
cacheable modules 758 bytes
  ./src/index.js 146 bytes [built] [code generated]
  ./src/mylib.js 612 bytes [built] [code generated]
webpack 5.70.0 compiled successfully in 113 ms

6.add bundle file inside index.html
     <script src="dist/bundle.js"></script>

.......


src/doctor/doctor.service.ts

export class DoctorService {
    constructor() { }
    //biz api
    findAll(): Array<string> {
        return ["Subramanian", "Geetha", "Murugan", "Karthik"]
    }
}

src/util/init.ts
export interface Init {
    init(): void
}
src/doctor/doctor.component.ts
import { DoctorService } from "./doctor.service";
import { Init } from '../util/init'

export class DoctorComponent implements Init {
    constructor(private doctorService: DoctorService) { }
    init(): void {
        console.log(this.doctorService.findAll())
    }

}













